class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        set<int> s;
        for(int i = 0; i < nums.size(); i++) {
            s.insert(nums[i]);
        }
        copy(s.begin(), s.end(), nums.begin());
        return s.size();
    }
};

Runtime: 19 ms, faster than 18.42% of C++ online submissions for Remove Duplicates from Sorted Array.
Memory Usage: 19.1 MB, less than 5.24% of C++ online submissions for Remove Duplicates from Sorted Array.


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 0){
            return 0;
        }
        
        int i = 0;
        for(int j = 1; j < nums.size(); j++){
            if(nums[j] != nums[i]){
                i++;
                nums[i] = nums[j];
            }
        }
        return i + 1;
    }
};

Runtime: 15 ms, faster than 34.64% of C++ online submissions for Remove Duplicates from Sorted Array.
Memory Usage: 18.2 MB, less than 93.37% of C++ online submissions for Remove Duplicates from Sorted Array.
